#!/usr/bin/env node
var optimist, argv, fs, sys, grammar, file, data, _i, _ref, _len;
optimist = require("optimist").usage("Transform a pwilang formatted file or stdin to HTML/XML\nUsage: $0 [options] file\n       $0 [options]").boolean(['help', 'inline', 'jinja', 'j', 'i']).alias({
  help: 'h',
  inline: 'i',
  jinja: 'j'
}).describe({
  help: "Show this help",
  inline: "Suppress the indentation in the output file",
  jinja: "Activate the jinja mode"
});
argv = optimist.argv;
fs = require("fs");
sys = require("sys");
grammar = require("./grammar");
if (argv.help) {
  console.log(optimist.help());
  process.exit(0);
}
if (argv._.length >= 1) {
  for (_i = 0, _len = (_ref = argv._).length; _i < _len; ++_i) {
    file = _ref[_i];
    fs.readFile(file, 'utf-8', function(err, data){
      var res;
      if (err) {
        return console.warn(err.message);
      } else {
        res = grammar.parse(data, {
          inline: argv.inline,
          jinja: argv.jinja
        });
        return sys.print(res);
      }
    });
  }
} else {
  process.stdin.resume();
  process.stdin.setEncoding("utf-8");
  data = "";
  process.stdin.on("data", function(chunk){
    return data += chunk;
  });
  process.stdin.on("end", function(){
    return sys.print(grammar.parse(data, {
      inline: argv.inline,
      jinja: argv.jinja
    }));
  });
}